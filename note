#!/usr/bin/env python
# encoding: utf-8

import yaml
import argparse
from datetime import datetime
from uuid import uuid4
import os
import sys
import shutil
import subprocess as sp
import shutil

home_dir = os.environ['HOME']
cfg = yaml.load(open(os.path.join(home_dir, '.note/config.yml')))
cfg_notes_file = cfg['notes_file']
cfg_notes_files_list = os.path.join(home_dir, cfg['notes_files_list'])
cfg_root_dir = os.path.join(home_dir, cfg['root_dir'])

def create_entry(notes_file, note):
    entries = yaml.load(open(notes_file))

    uid = uuid4()
    date, time = datetime.now().isoformat('T').split('T')
    time = time[:8]
    timestamp = ' '.join([date, time])
    pwd = os.getcwd()
    note = note.strip()

    new_entry = {'uid': str(uuid4()),
            'timestamp': timestamp,
            'note': note.strip(),
            'context': pwd}

    if entries:
        entries.append(new_entry)
    else:
        entries = [new_entry]

    yaml.dump(entries, open(notes_file, 'w'))


def update_proj_files():
    cmd = ['find',
            cfg_root_dir,
            '-name',
            cfg_notes_file,
           '>',
           cfg_notes_files_list
           ]
    cmd = ' '.join(cmd)
    output = sp.check_output(cmd, stderr=sp.PIPE, shell=True)

    return None


def create_proj_file():
    pwd = os.getcwd()
    f = os.path.join(pwd, args.create, cfg_notes_file)
    if not os.path.exists(f):
        open(f, 'w').close()
        print 'Created %s' % (f)
    else:
        print '%s exists: Exiting' % (f)
        sys.exit()
    return None


def longest_leading_common_directory(dir1, dir2):
    dir1 = dir1.split(os.path.sep)
    dir2 = dir2.split(os.path.sep)
    common = []
    for s1, s2 in zip(dir1, dir2):
        if s1 == s2:
            common.append(s1)
    return os.path.sep.join(common)


def get_notes_file():
    proj_notes_files = open(cfg_notes_files_list).readlines()

    # find the best match
    pwd = os.getcwd()
    common_directories = []
    for proj_notes_file in proj_notes_files:
        tmp_str = longest_leading_common_directory(proj_notes_file, pwd)
        common_directories.append(tmp_str)

    # return the longest directory
    longest_dir = ''
    for d in common_directories:
        print d, len(d)
        if len(d) > len(longest_dir):
            longest_dir = d

    return os.path.join(longest_dir, cfg_notes_file)


if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='note taking while working with vasp')
    
    parser.add_argument('-n', '--note', help='Note to be taken')
    parser.add_argument('-i', '--input_file', nargs='?', const=sys.stdin, type=argparse.FileType('r'),
            help='Note to be read from a file')
    parser.add_argument('-u', '--update', action='store_true', help='Update list of proj-notes files')
    parser.add_argument('-c', '--create', nargs='?', const='.', type=str,
            help='Create notes file in the present directory')
    
    args = parser.parse_args()


    if args.note or args.input_file:
        notes_file = get_notes_file()
        if os.path.exists(notes_file):
            # create backup
            shutil.copy(notes_file, notes_file+'~')  
            # then add the note
            if args.note:
                create_entry(notes_file, args.note)
            if args.input_file:
                create_entry(notes_file, args.input_file.read())
        else:
            print '{notes_file} does not exist'.format(notes_file=notes_file)


    if  args.update:
        update_proj_files()

    if args.create:
        create_proj_file()
        update_proj_files()
